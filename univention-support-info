#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# univention-support-info - collect system information
#
# Copyright 2011 Univention GmbH
#
# http://www.univention.de/
#
# All rights reserved.
#
# The source code of this program is made available
# under the terms of the GNU Affero General Public License version 3
# (GNU AGPL V3) as published by the Free Software Foundation.
#
# Binary versions of this program provided by Univention to you as
# well as other copyrighted, protected or trademarked materials like
# Logos, graphics, fonts, specific documentations and configurations,
# cryptographic keys etc. are subject to a license agreement between
# you and Univention and not subject to the GNU AGPL V3.
#
# In the case you use this program under the terms of the GNU AGPL V3,
# the program is provided in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public
# License with the Debian GNU/Linux or Univention distribution in file
# /usr/share/common-licenses/AGPL-3; if not, see
# <http://www.gnu.org/licenses/>.
usiVersion = '63'

fingerprint = '1EB89EEB365A84A65F95FB28CD78CD3C8F91B44F'
# create with: gpg2 --armor --export --export-options export-minimal $fingerprint
keyData = '\n'.join((
	'-----BEGIN PGP PUBLIC KEY BLOCK-----',
	'',
	'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',
	'=KfDo',
	'-----END PGP PUBLIC KEY BLOCK-----'))

toprc = '\n'.join((
	'RCfile for "top with windows"		   # shameless braggin\'',
	'Id:a, Mode_altscr=0, Mode_irixps=1, Delay_time=3.000, Curwin=0',
	'Def	 fieldscur=AEHIOQTWKNMbcdfgjplrsuvyzX',
	'		winflags=62905, sortindx=10, maxtasks=0',
	'		summclr=1, msgsclr=1, headclr=3, taskclr=1',
	'Job	 fieldscur=ABcefgjlrstuvyzMKNHIWOPQDX',
	'		winflags=62777, sortindx=0, maxtasks=0',
	'		summclr=6, msgsclr=6, headclr=7, taskclr=6',
	'Mem	 fieldscur=ANOPQRSTUVbcdefgjlmyzWHIKX',
	'		winflags=62777, sortindx=13, maxtasks=0',
	'		summclr=5, msgsclr=5, headclr=4, taskclr=5',
	'Usr	 fieldscur=ABDECGfhijlopqrstuvyzMKNWX',
	'		winflags=62777, sortindx=4, maxtasks=0',
	'		summclr=3, msgsclr=3, headclr=2, taskclr=3',
	'',
))

import cStringIO
import glob
import re
import gzip
import optparse
import os
import shutil
import socket
import stat
import subprocess
import threading
import sys
import tarfile
import tempfile
import time
import urllib2
from distutils.spawn import find_executable

# ignore apt's "API not stable yet" warning
import warnings
warnings.filterwarnings("ignore", category=FutureWarning, append=True)

import logging
logger = logging.getLogger('USI_DEBUG')

import apt
import apt_pkg

try:
	from univention import config_registry
except ImportError:
	for path in ('/usr/share/pyshared', '/usr/lib/python2.7/dist-packages/'):
		if os.path.isfile(os.path.join(path, 'univention/config_registry.py')):
			import imp
			config_registry = imp.load_source('config_registry', os.path.join(path, 'univention/config_registry.py'))
			break
	else:
		for path in ('/usr/share/pyshared', '/usr/lib/python2.7/dist-packages/'):
			sys.path.append(path)
			try:
				from univention import config_registry
				break
			except ImportError:
				sys.path.pop()
		else:
			raise

ucr = config_registry.ConfigRegistry()
ucr.load()
timeString = time.strftime('%Y-%m-%d_%H-%M-%SZ', time.gmtime())
hostname = socket.gethostname()

env = None
sambaDomainVersion = None
archive = None
archiveFile = None
archiveFileName = None


class Command(object):

	def __init__(self, cmd, Input):
		self.cmd = cmd
		self.Input = Input
		self.process = None
		self.outData = ""
		self.errData = ""

	def run(self, timeout):
		def target():
			try:
				self.process = subprocess.Popen(self.cmd, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE, close_fds=True, env=env)
				(self.outData, self.errData) = self.process.communicate(input=self.Input)
			except (OSError, IOError) as ex:
				self.outData = "Could not execute %s: %s" % (repr(self.cmd), repr(' '.join(map(str, ex.args))))

		thread = threading.Thread(target=target)
		thread.start()

		thread.join(timeout)
		if thread.is_alive():
			self.process.terminate()
			thread.join()
		if self.process:
			return (self.process.returncode, self.outData, self.errData)
		else:
			return (1, self.outData, self.errData)


def Popen(CommandTuple, Input=None, timeout=30):
	command = Command(CommandTuple, Input)
	logger.debug("running Command '{}'...".format(repr(CommandTuple)))
	Result = command.run(timeout)
	if Result[0] != 0:
		print >> usilog, "Command: '%s'\nResult: '%s'" % (repr(CommandTuple), repr(Result))
		if Result[0] == -15:
			print >> usilog, "Process has been terminated [timeout]"
		print >> usilog, ""
	return Result


def _ldapsearchCommand():
	''' Get ldapsearch command depending on UCS version '''
	if find_executable('univention-ldapsearch'):
		return 'univention-ldapsearch'
	return 'ldapsearch'


def _sprint(string):
	''' write status string to stdout without newline '''
	sys.stdout.write(string)
	sys.stdout.flush()


def U32(i):
	'''
	Return i as an unsigned integer, assuming it fits in 32 bits.
	If it's >= 2GB when viewed as a 32-bit unsigned int, return a long.
	'''
	if i < 0:
		i += 1L << 32
	return i


def addFile(name, size, fileobj):
	# try to determine filesize
	if size is None or size is False:
		fileobj.seek(0, os.SEEK_END)
		size = fileobj.tell()
	if fileobj.tell() > 0:
		fileobj.seek(0)

	info = tarfile.TarInfo()
	info.size = size
	info.name = 'univention-support-info-' + hostname + '-' + timeString + '/' + name
	info.mode = stat.S_IRUSR
	# keep file timestamp
	# info.mtime = time.time()
	try:
		logger.debug("adding file '{}'".format(info.name))
		archive.addfile(info, fileobj)
	except IOError, ex:
		print 'WARNING: failed to add %r: error=%r' % (fileobj, ex)


def addFileByPath(filename, flat):
	if filename.startswith('/proc/'):
		# This is a /proc/ file, os.stat(filename).st_size will always return 0
		tmpf = tempfile.mkstemp(prefix='univention-support-info.')[1]
		try:
			shutil.copy(filename, tmpf)
		except (OSError, IOError), error:
			error = '\n'.join(map(str, error.args))
			if flat:
				addFile('files/' + filename.strip('/').replace('/', '_') + '.ERROR', len(error), cStringIO.StringIO(error))
			else:
				addFile('files/' + filename.strip('/') + '.ERROR', len(error), cStringIO.StringIO(error))
			os.unlink(tmpf)
		filesize = os.stat(tmpf).st_size
		os.unlink(tmpf)
	else:
		try:
			filesize = os.stat(filename).st_size
		except (OSError, IOError), error:
			filesize = 0

	try:
		fileobj = open(filename, 'rb')
	except (OSError, IOError), error:
		error = '\n'.join(map(str, error.args))
		if flat:
			addFile('files/' + filename.strip('/').replace('/', '_') + '.ERROR', len(error), cStringIO.StringIO(error))
		else:
			addFile('files/' + filename.strip('/') + '.ERROR', len(error), cStringIO.StringIO(error))
	else:
		# addFile('files/' + filename.strip('/').replace('/', '_'), filesize, fileobj)
		addFile('files/' + filename.strip('/'), filesize, fileobj)
		fileobj.close()


def certificateValidity(CertificatePath, flat):
	try:
		import M2Crypto
	except ImportError, error:
		error = '\n'.join(map(str, error.args))
		if flat:
			addFile('info/ssl/' + CertificatePath.strip('/').replace('/', '_') + '.ERROR', len(error), cStringIO.StringIO(error))
		else:
			addFile('info/ssl/' + CertificatePath.strip('/') + '.ERROR', len(error), cStringIO.StringIO(error))
		return

	try:
		cert = M2Crypto.X509.load_cert(CertificatePath)
		validity = '%s\nNot Before: %s\nNot After : %s\n' % (CertificatePath, cert.get_not_before(), cert.get_not_after(), )
		if flat:
			addFile('info/ssl/' + CertificatePath.strip('/').replace('/', '_'), len(validity), cStringIO.StringIO(validity))
		else:
			addFile('info/ssl/' + CertificatePath.strip('/'), len(validity), cStringIO.StringIO(validity))
	except (OSError, IOError, M2Crypto.X509.X509Error), error:
		error = '\n'.join(map(str, error.args))
		if flat:
			addFile('info/ssl/' + CertificatePath.strip('/').replace('/', '_') + '.ERROR', len(error), cStringIO.StringIO(error))
		else:
			addFile('info/ssl/' + CertificatePath.strip('/') + '.ERROR', len(error), cStringIO.StringIO(error))


def certificateValidities(flat):
	_sprint('Checking certificate validity: ')
	CertificatePatterns = [
		'/etc/univention/ssl/*.*/cert.pem',
		'/etc/univention/ssl/ucsCA/CAcert.pem',
	]
	for CertificatePattern in CertificatePatterns:
		for CertificatePath in glob.glob(CertificatePattern):
			certificateValidity(CertificatePath, flat)
	print 'done.'


def simpleFiles(flat):
	# add S4-Connector Mapping (BUG 40571)
	# add shares.conf.d/*
	# /boot/config-*, /etc/crontab, /var/spool/cron/**, removed and add /proc/modules (BUG 35075)
	FilePatterns = [
		'/etc/apache2/*',
		'/etc/apache2/*/*',
		'/etc/apt/*',
		'/etc/apt/*/*',
		'/etc/cron*/*',
		'/etc/crontab',
		'/etc/fstab',
		'/etc/imapd/*',
		'/etc/mtab',
		'/etc/passwd',
		'/etc/procmailrc',
		'/etc/spamassassin/*',
		'/etc/univention/connector/ad/mapping.py',
		'/etc/univention/connector/s4/mapping',
		'/etc/univention/connector/s4/mapping.py',
		'/etc/univention/connector/s4/mapping',
		'/etc/univention/installation_profile',
		'/etc/ox-secrets/*',
		'/opt/open-xchange/etc/*',
		'/opt/open-xchange/etc/*/*',
		'/opt/open-xchange/etc/*/*/*',
		'/proc/mounts*',
		'/proc/mdstat',
		'/proc/modules',
		'/proc/drbd',
		'/proc/cmdline',
		'/var/lib/univention-directory-listener/bad_cache',
		'/var/lib/univention-directory-replication/failed.ldif',
		'/var/lib/univention-connector/s4/*',
		'/var/lib/samba/private/.adtakeover/*',
		'/var/spool/cron/**',
		'/etc/postfix/*',
		'/etc/samba/shares.conf.d/*',
		'/etc/imapd/*',
		'/var/univention-backup/ad-takeover/*',
		'/etc/*/local.conf*',
		'/root/.bash_history',
		'/etc/ldap/slapd.conf',
	]
	FileExcludePatterns = ['/etc/apache2/mods-available/*', '/etc/apache2/sites-available/*']

	Files = set()
	ExcludeFiles = list()
	for FileExcludePattern in FileExcludePatterns:
		ExcludeFiles.extend(glob.glob(FileExcludePattern))
	for FilePattern in FilePatterns:
		for Filename in glob.glob(FilePattern):
			if Filename not in ExcludeFiles:
				Files.add(Filename)

	_sprint('Collecting files: ')
	for Filename in sorted(list(Files)):
		if os.path.isfile(Filename):
			addFileByPath(Filename, flat)
			_sprint('.')
	print 'done.'


def licenseObject():
	''' Get license object from ldap (cn=license) '''
	stdout = executeCommand('univention-license-object', (_ldapsearchCommand(), '-x', '-b', 'cn=license,cn=univention,' + ucr.get('ldap/base')))
	addFile('info/univention-license-object', len(stdout), cStringIO.StringIO(stdout))


def checkMaintenance():
	''' Check if UCS-Version is in maintenance '''
	if ucr.get('server/role') != 'ucc':
		ucs_ver = ucr.get('version/version') + '-' + ucr.get('version/patchlevel')
		ucs_lic = ucr.get('license/base')
		ldap_base = ucr.get('ldap/base')
		# check depending on License
		try:
			maint_url = "http://updates.software-univention.de/download/ucs-maintenance/" + ucs_ver + ".yaml"
			data = urllib2.urlopen(maint_url).read()
			maint_info = dict((k.strip(), v.strip()) for k, v in (line.split(':', 1) for line in data.split("\n") if line))

			tmpf = tempfile.TemporaryFile(prefix='univention-support-info.')
			# if maint_info['maintained'].lower() not in ['true', '1']:
			if maint_info['maintained'].lower() in ['true', '1'] or (maint_info['maintained'].lower() in ['extended', '1'] and ucs_lic == ldap_base):
				print >> tmpf, "maintenance ok\ncurrent UCS Version %s" % (ucs_ver)
				addFile('info/maintenance', None, tmpf)
			else:
				miMsg = "Please note, system is no longer maintained, security updates are no longer available for current UCS Version %s" % (ucs_ver,)
				print "\033[93m%s\033[0m" % (miMsg)
				print >> tmpf, miMsg
				addFile('info/maintenance', None, tmpf)
		except (urllib2.URLError, IOError) as innerex:
			tmpf = tempfile.TemporaryFile(prefix='univention-support-info.')
			print "Warn: Can't reach univention server - product maintenance undetermined [%s]" % (innerex)
			print >> tmpf, "Failed to check maintenance (%s)\ncurrent UCS Version %s" % (innerex, ucs_ver)
			addFile('info/maintenance', None, tmpf)
	else:
		ucc_ver = ucr.get('version/version')
		tmpf = tempfile.TemporaryFile(prefix='univention-support-info.')
		print "Could NOT determine product maintenance for UCC systems."
		print >> tmpf, "Could NOT determine product maintenance for UCC systems.)\ncurrent UCC Version %s" % (ucc_ver,)
		addFile('info/maintenance', None, tmpf)


def checkEntryUUID():
	''' Check if ldap base is searchable by its entryUUID '''
	entryuuid = ""
	basedn = ""
	tmpf = tempfile.TemporaryFile(prefix='univention-support-info.')
	(exitcode, stdout, stderr, ) = Popen((_ldapsearchCommand(), '-xLLL', '-sbase', 'entryUUID', ))
	if exitcode == 0:
		entryuuid = stdout.split()[3]
	else:
		print >> tmpf, "ERROR: ldapsearch for base failed: %s" % str(stderr)
		addFile('info/entryUUID.stderr', None, tmpf)
		return
	(exitcode, stdout, stderr, ) = Popen((_ldapsearchCommand(), '-xLLL', 'entryUUID=' + entryuuid, 'dn', ))
	if exitcode == 0:
		basedn = stdout.split()[1]
	else:
		print >> tmpf, "ERROR: ldapsearch by entryUUID failed: %s" % str(stderr)
		addFile('info/entryUUID.stderr', None, tmpf)
		return
	if ucr.get('ldap/base') == basedn:
		print >> tmpf, "OK: ldap base found by entryUUID"
	else:
		print >> tmpf, "ERROR: ldap base not found by entryUUID, check ldap index"
	addFile('info/entryUUID', None, tmpf)


def aptPackageList():
	"""List installed packages and their source repository."""
	_sprint('Collecting package lists: ')
	cache = apt.Cache()

	packagesAll = tempfile.TemporaryFile(prefix='univention-support-info.')
	packagesUnknownSource = tempfile.TemporaryFile(prefix='univention-support-info.')

	packages = [_ for _ in cache if _.is_installed]
	for pkg in packages:
		version = pkg.installed.version
		package = pkg.versions[version]
		try:
			uri = package.uri
		except StopIteration:
			print >> packagesUnknownSource, "%s\tUNKNOWN" % (pkg.name,)
			continue
		print >> packagesAll, "%s\t%s" % (pkg.name, uri)

	addFile('info/packages_all', None, packagesAll)
	addFile('info/packages_unknown-source', None, packagesUnknownSource)
	print 'done.'


def executeCommand(commandName, command, log_stderr=False):
	(exitcode, stdout, stderr, ) = Popen(command)
	if exitcode or log_stderr:
		if type(exitcode) is int:
			stderr += '\nExitcode was %d\n' % exitcode
		else:
			stderr += exitcode + '\n'
		addFile('info/' + commandName + '.stderr', len(stderr), cStringIO.StringIO(stderr))
	return stdout


def templateFiles(flat):
	_sprint('Searching for changed template files: ')
	stdout = executeCommand('check-templates', ('find', '/etc/univention/templates/files/', '(', '-name', '*.dpkg-new', '-o', '-name', '*.dpkg-dist', ')', '-print0', ))
	files = [templatefile for templatefile in stdout.split('\0') if templatefile]
	message = ('Found %d:\n' % len(files)) + '\n'.join(files) + '\n'
	addFile('info/check-templates', len(message), cStringIO.StringIO(message))
	for templatefile in files:
		addFileByPath(templatefile, flat)
		if templatefile.endswith('.dpkg-new'):
			addFileByPath(templatefile[:-len('.dpkg-new')], flat)
		elif templatefile.endswith('.dpkg-dist'):
			addFileByPath(templatefile[:-len('.dpkg-dist')], flat)
		_sprint('.')
	print 'done.'


def checkTransactionFile():
	_sprint('Collecting output transaction-file-check: ')

	transactionCheck = tempfile.TemporaryFile(prefix='univention-support-info.')
	try:
		with open('/var/lib/univention-ldap/notify/transaction', 'r') as transaction:
			tac = 1  # transaction id counter
			tlc = 1  # transaction line counter

			for line in transaction:
				tid = line.strip().split(' ', 1)[0]

				try:
					tid = int(tid)
				except:
					print >> transactionCheck, 'ERROR at line %d: "%s"' % (tlc, ' '.join(line))
					continue

				if tid == tac:  # ok
					tac += 1
				else:
					print >> transactionCheck, 'Line %s: \t ID:%s should be %s' % (tlc, tid, tac),
					cld = (tid - tac)  # counter line diff
					if cld < 0:  # id repeat
						cld = (cld * -1)
						print >> transactionCheck, ' REPEATED (%s)' % (cld)
						tac = (tid + cld)
					elif cld > 0:  # id skip
						print >> transactionCheck, ' SKIPPED (%s)' % (cld)
						tac = (tid + 1)

				tlc += 1
		addFile('info/transaction-file-check', None, transactionCheck)
		print 'done.'

	except IOError:
		print >> transactionCheck, 'ERROR: NO TRANSACTION FILE!'
		print 'FAIL'


def collectCommandData():
	# add pvdisplay,vgdisplay,lvdisplay (BUG 35075)
	# add sharesec --view-all (BUG 44376)
	commands = {
		'hostname-f': ('hostname', '--fqdn', ),
		'ifconfig-a': ('ifconfig', '-v', '-a', ),
		'iptables-L_filter': ('iptables', '-L', '-n', '-v', '-t', 'filter', ),
		'iptables-L_nat': ('iptables', '-L', '-n', '-v', '-t', 'nat', ),
		'iptables-L_mangle': ('iptables', '-L', '-n', '-v', '-t', 'mangle', ),
		'iptables-L_raw': ('iptables', '-L', '-n', '-v', '-t', 'raw', ),
		'iptables-save': ('iptables-save', '-c', ),
		'route-4': ('route', '-v', '-ee', '-n', '-A', 'inet', ),
		'route-6': ('route', '-v', '-ee', '-n', '-A', 'inet6', ),
		'netstat': ('netstat', '--tcp', '--udp', '--listening', '--program', '--extend', '--extend', '--verbose', '--timers', '--numeric', '--wide', ),
		'dpkg-l': ('dpkg-query', '--show', '--showformat=${Status}\t${Package}\t${Version}\n', ),
		'dpkg--audit': ('dpkg', '--audit', ),
		'uname': ('uname', '-a', ),
		'ps': ('ps', '-AHFly', ),
		'ps-full': ('ps', '-ALwwo', 'stat,pid,ppid,sid,tty,nlwp,lwp,pri,ni,sched,wchan,vsz,rss,sz,pcpu,pmem,cmd,blocked,caught,ignored,pending,lstart,cls,time,flags,uid,user,ruid,ruser,suid,suser,gid,group,rgid,rgroup,sgid,sgroup', ),
		'ucr-dump': ('univention-config-registry', 'dump', ),
		'df-full': ('df', '--portability', '--print-type', ),
		'df-i-full': ('df', '--portability', '--print-type', '--inodes', ),
		'df': ('df', '-h', ),
		'df-i': ('df', '-h', '-i', ),
		'join-status': ('univention-check-join-status', ),
		'virsh-qemu': ('virsh', '-c', 'qemu:///system', 'capabilities', ),
		'virsh-xen': ('virsh', '-c', 'xen:///', 'capabilities', ),
		'pvdisplay': ('pvdisplay',),
		'vgdisplay': ('vgdisplay',),
		'lvdisplay': ('lvdisplay',),
		'top': ('top', '-b', '-n2', ),
		'testparm': (('testparm', '-s', '-vvv', ), True),
		'listenerID': ('cat', '/var/lib/univention-directory-listener/notifier_id', ),
		'notifierID': ('/usr/share/univention-directory-listener/get_notifier_id.py',),
		'mailq': ('mailq', ),
		'univention-license-check': ('univention-license-check', ),
		'hostaccount-id': ('id', ucr.get('hostname') + '$', ),
		'dig_AXFR': ('dig', '@%s' % ucr.get('nameserver1'), ucr.get('domainname'), '-t', 'AXFR'),
		'univention-connector-list-rejected': ('univention-connector-list-rejected', ),
		'sharesec': ('sharesec', '--view-all', ),
		'adtakeover': ('ls -1d', '/var/lib/samba*/private.before-ad-takeover-*', ),
		'univentionService': ('univention-ldapsearch', '-xLLL', '(|(univentionService=S4-Connector)(univentionService=Samba 4))', 'univentionService', ),
		# ('univention-ldapsearch', '-xLLL', '(|(univentionService=S4-Connector)(univentionService=Samba 4))', 'univentionService univentionObjectType univentionServerRole univentionOperatingSystem univentionOperatingSystemVersion', ),
	}
	# Commands depending on samba version
	if sambaDomainVersion == 3:
		commands.update({
			'test-join': ('net', 'rpc', 'testjoin', ),
		})
	elif sambaDomainVersion == 4:
		commands.update({
			'net-ads-info': ('net', 'ads', 'info', ),
			'net-ads-lookup': ('net', 'ads', 'lookup', ),
		})
		if ucr.get('samba4/role', None):
			# Run only S4
			commands.update({
				'samba-tool-drs-showrepl': ('samba-tool', 'drs', 'showrepl', ),
				'samba-tool-domain-level-show': ('samba-tool', 'domain', 'level', 'show'),
				'samba-tool-domain-passwordsettings': ('samba-tool', 'domain', 'passwordsettings', 'show'),
				'testparm-samba4': (('testparm.samba4', '-s', '-vvv'), True),
				'samba-tool-fsmo-show': ('samba-tool', 'fsmo', 'show'),
				'univention-s4connector-list-rejected': ('univention-s4connector-list-rejected',),
				'samba-tool-processes': ('samba-tool', 'processes'),
				'check-essential-dns-records': ('/usr/share/univention-samba4/scripts/check_essential_samba4_dns_records.sh',),
			})
			# >= Samba4 RC (UCS 3.1)
			if ucr.get('version/version') >= '3.1':
				commands.update({
					'samba-tool-domain-info': ('samba-tool', 'domain', 'info', '127.0.0.1', ),
				})
		else:
			# Run only on S3 member in S4 domain
			commands.update({
				'test-join': ('net', 'ads', 'testjoin', ),
			})
	# Commands depending on UCS-Version >= UCS 4.1-3
	if ((ucr.get('version/version') == '4.1') and (ucr.get('version/patchlevel') >= '3')) or ucr.get('version/version') >= '4.2':
		commands.update({
			'univention-directory-listener-ctrl': ('univention-directory-listener-ctrl', 'status', ),
		})
	# Commands depending on UCS-Version → UCS 4.2
	if ucr.get('version/version') >= '4.2':
		commands.update({
			'journalctl': ('journalctl', '--since=yesterday', ),
			'hostnamectl-status': ('hostnamectl', 'status', ),
			'univention-app-info': ('univention-app', 'info', ),
		})

	_sprint('Collecting command output: ')
	for commandName in commands:
		command = commands[commandName]
		if type(command[0]) == tuple:
			stdout = executeCommand(commandName, command[0], command[1])
		else:
			stdout = executeCommand(commandName, command)

		addFile('info/' + commandName, len(stdout), cStringIO.StringIO(stdout))
		_sprint('.')
	print 'done.'


def univentionSystemInfo():
	_sprint('Collecting hardware information: ')
	manu = executeCommand('dmidecode', ('dmidecode', '-s', 'system-manufacturer'))
	product = executeCommand('dmidecode', ('dmidecode', '-s', 'system-product-name'))
	if not manu:
		manu = 'Unknown'
	if not product:
		product = 'Unknown'
	stdout = executeCommand('univention-system-info', ('univention-system-info', '-u', '-m', manu, '-t', product, '-c', 'Created by univention-support-info', '-s', '-', ))
	archive = None
	for line in stdout.split('\n'):
		if line.startswith('archive'):
			archive = line.split(':', 1)[1]
	if not archive:
		error = 'No archive returned!'
		error += '\nunivention-system-info stdout:\n%s' % stdout
		addFile('info/univention-system-info.ERROR', len(error), cStringIO.StringIO(error))
		return
	filename = os.path.join('/var/www/univention-management-console/system-info/', archive)
	# If UMC is not installed /var/www/univention-management-console/system-info/ does not exist and archive stays in /tmp
	if not os.path.isfile(filename):
		filename = os.path.join('/tmp/', archive)
	try:
		archive = tarfile.open(name=filename, mode='r:*')
		for member in archive:
			if member.isfile():
				fileobj = archive.extractfile(member)
				addFile('info/univention-system-info/' + member.name, member.size, fileobj)
				fileobj.close()
		archive.close()
	except (IOError, tarfile.TarError, ), error:
		error = '\n'.join(map(str, error.args))
		error += '\nunivention-system-info stdout:\n%s' % stdout
		addFile('info/univention-system-info.ERROR', len(error), cStringIO.StringIO(error))
	print 'done.'


def rotatedLogs(regEx, DefaultMaxLineCount, options):
	DirectoryList = [
		('/var/log/auth.log', DefaultMaxLineCount),
		('/var/log/boot.log', DefaultMaxLineCount),
		('/var/log/daemon.log', DefaultMaxLineCount),
		('/var/log/debug.log', DefaultMaxLineCount),
		('/var/log/dpkg.log', DefaultMaxLineCount),
		('/var/log/heimdal-kdc.log', DefaultMaxLineCount),
		('/var/log/kern.log', DefaultMaxLineCount),
		('/var/log/mail.log', DefaultMaxLineCount),
		('/var/log/messages', DefaultMaxLineCount),
		('/var/log/syslog', 2000000),
		('/var/log/apt/term.log', DefaultMaxLineCount),
		('/var/log/univention/config-registry.replog', DefaultMaxLineCount),
		('/var/log/univention/connector-s4.log', 2000000),
		('/var/log/univention/system-stats.log', 5000000),
		('/var/log/apache/', DefaultMaxLineCount),
		('/var/log/apache2/', DefaultMaxLineCount),
		('/var/log/cups/', DefaultMaxLineCount),
		('/var/log/dansguardian/', DefaultMaxLineCount),
		('/var/log/freeradius/', DefaultMaxLineCount),
		('/var/log/installer/', 2000000),
		('/var/log/kopano/', 100000),
		('/var/log/libvirt/', DefaultMaxLineCount),
		('/var/log/open-xchange/', DefaultMaxLineCount),
		('/var/log/samba/', DefaultMaxLineCount),
		('/var/log/squid/', DefaultMaxLineCount),
		('/var/log/squidguard/', DefaultMaxLineCount),
		('/var/log/univention/', DefaultMaxLineCount),
		('/var/log/univention/ucc-clients/', DefaultMaxLineCount),
		('/var/log/zarafa/', 100000),
	]
	FullLogs = set((  # for these every available log-file shall be included
		'/var/log/daemon.log',
		'/var/log/dpkg.log',
		'/var/log/kern.log',
		'/var/log/apt/term.log',
		'/var/log/univention/updater.log',
		'/var/log/univention/ad-takeover.log',

	))
	GzipSuffix = '.gz'
	logs = {}
	for Entry in [fp[0] for fp in DirectoryList]:
		if os.path.isdir(Entry):
			FileList = ["%s%s" % (Entry, f, ) for f in os.listdir(Entry) if re.search(r"%s%s" % (os.path.splitext(f)[0], regEx), f)]
			logger.debug("Dir.Entry: '{0}' has Files '{1}'".format(Entry, FileList))
		elif os.path.isfile(Entry):
			entryPath = "%s/" % os.path.dirname(Entry)
			entryFile = os.path.basename(Entry)
			entryFilename = os.path.splitext(entryFile)[0]
			FileList = ["%s%s" % (entryPath, f, ) for f in os.listdir(entryPath) if re.search(r"%s%s" % (entryFilename, regEx), f)]
		else:
			FileList = []
		# for filename in glob.glob(FilePattern):
		for filename in FileList:
			if os.stat(filename).st_size <= 0 or os.path.isdir(filename):
				# ignore 0 byte files
				continue
			if filename.endswith(GzipSuffix):
				gzipped = True
				filename = filename[:-len(GzipSuffix)]
			else:
				gzipped = False
			if not filename.endswith('.') and os.path.splitext(filename)[1].strip('0123456789') == '.':  # has extension and only digits in it
				(filename, ext, ) = os.path.splitext(filename)
				number = int(ext.lstrip('.'))
			else:
				number = -1
			if filename not in logs:
				logs[filename] = {}
			logs[filename][number] = gzipped

	_sprint('Collecting logfiles: ')
	for logname in sorted(logs):
		logLinecount = 0
		nonemptyNumber = 0
		for number in sorted(logs[logname]):
			# is logname gzipped?
			gzipped = logs[logname][number]
			path = logname
			fileLinecount = 0
			if number != -1:
				path += '.%d' % number
			if gzipped:
				try:
					logfile = open(path + GzipSuffix, 'rb')
				except (OSError, IOError, ), error:
					error = '\n'.join(map(str, error.args))
					if options.flatStruct:
						addFile('files/' + '%s_%d.stderr' % (logname.strip('/').replace('/', '_'), number, ), len(error), cStringIO.StringIO(error))
					else:
						addFile('files/' + '%s_%d.stderr' % (logname.strip('/'), number, ), len(error), cStringIO.StringIO(error))
					continue

				# calc bytes and linecount of logfile
				# last 4 bytes of a gzip file contain the size of the original
				# (uncompressed) input data modulo 2^32.
				try:
					logfile.seek(-4, os.SEEK_END)
				except IOError, e:
					print('\n\nFilename: %s' % path + GzipSuffix)
					raise IOError(e)
				fileBytes = U32(gzip.read32(logfile))
				logfile.close()
				fileLinecount = int(subprocess.Popen('zcat -f %s | wc -l' % (path + GzipSuffix), stdout=subprocess.PIPE, shell=True).stdout.read().strip())
			else:
				# addFile may calculate the size for us
				fileBytes = None
				fileLinecount = int(subprocess.Popen(('wc', '-l', path), stdout=subprocess.PIPE).stdout.read().strip().split()[0])
			logLinecount += fileLinecount
			# if gzipped:
			# 	_sprint('"%s", "%s", "%s" -> ' % (path + GzipSuffix, fileBytes, fileLinecount))
			# else:
			# 	_sprint('"%s", "%s", "%s" -> ' % (path, fileBytes, fileLinecount))

			if fileLinecount <= 0:
				# skip logname if empty
				# print 'ERROR: Empty file? "%s"' % path
				continue

			nonemptyNumber += 1
			try:
				if gzipped:
					logfile = gzip.GzipFile(path + GzipSuffix, 'rb')
				else:
					logfile = open(path, 'rb')
			except (OSError, IOError, ), error:
				error = '\n'.join(map(str, error.args))
				if options.flatStruct:
					addFile('files/' + '%s_%d.stderr' % (logname.strip('/').replace('/', '_'), nonemptyNumber, ), len(error), cStringIO.StringIO(error))
				else:
					addFile('files/' + '%s_%d.stderr' % (logname.strip('/'), nonemptyNumber, ), len(error), cStringIO.StringIO(error))
				continue

			# Add file to archive ...
			if options.flatStruct:
				addFile('files/' + '%s_%d' % (logname.strip('/').replace('/', '_'), nonemptyNumber, ), fileBytes, logfile)
				# print 'Added as "%s_%d"' % (logname.strip('/').replace('/', '_'), nonemptyNumber,)
			else:
				addFile('files/' + '%s_%d' % (logname.strip('/'), nonemptyNumber, ), fileBytes, logfile)
				# print 'Added as "%s_%d"' % (logname.strip('/'), nonemptyNumber,)
			logfile.close()

			if not options.fullLogs:
				logger.debug("*** LN: '{}' ***".format(logname))
				logger.debug("*** DL: '{}'\n***".format(DirectoryList))
				try:
					if logname not in FullLogs and logLinecount > filter(lambda x: logname.startswith(x[0].replace('*', '')), DirectoryList)[0][1]:
						break
				except Exception as ex:
					logger.debug("EXCEPTION: {}".format(ex))
					continue

		_sprint('.')
	print 'done.'


def atJobs():
	'''
	Generate a list of at-Jobs (usefull for UCS@school)
	'''
	try:
		from univention.lib import atjobs as at
	except ImportError, error:
		error = str(error.message)
		addFile('info/at-jobs' + '.ERROR', len(error), cStringIO.StringIO(error))
		return

	jobs = ''
	try:
		for job in at.list(extended=True):
			jobs += '\n'.join(str(job))
	except OSError, error:
		error = str(error.message)
		addFile('info/at-jobs' + '.ERROR', len(error), cStringIO.StringIO(error))
	addFile('info/at-jobs', len(jobs), cStringIO.StringIO(jobs))


def tryDelete(filename):
	try:
		os.remove(filename)
	except (OSError, IOError, ):
		pass


def gpg(archiveFileName):
	print("Encrypting file..."),
	keyringFileName = tempfile.mkstemp(prefix='univention-support-info-keyring.', suffix='.gpg')[1]
	secringFileName = tempfile.mkstemp(prefix='univention-support-info-secring.', suffix='.gpg')[1]
	trustdbFileName = tempfile.mkstemp(prefix='univention-support-info-trustdb.', suffix='.gpg')[1]
	tryDelete(trustdbFileName)  # HACK: file must not exist for gpg to work
	gpgFileName = archiveFileName + '.gpg'
	gpgBase = (
		'gpg',
		'--batch', '--quiet', '--no-tty',
		'--with-colons', '--utf8-strings',
		'--no-auto-check-trustdb', '--no-auto-key-locate',
		'--no-options',
		'--no-random-seed-file',
		'--trust-model', 'always',
		'--trustdb-name', trustdbFileName,
		'--secret-keyring', secringFileName,
		'--no-default-keyring', '--keyring', keyringFileName,
	)
	gpgImport = gpgBase + ('--import',)
	gpgEncrypt = gpgBase + ('--recipient', fingerprint, '--encrypt', archiveFileName,)
	# Popen is a function above which injects the Input to the called process as "human" input
	(exitcode, stdout, stderr, ) = Popen(gpgImport, Input=keyData)
	if exitcode:
		print("gpg-import failed with %s" % (exitcode))
		if stdout:
			print("stdout: %s" % repr(stdout))
		if stderr:
			print("stderr: %s" % repr(stderr))
		tryDelete(keyringFileName)
		tryDelete(keyringFileName + '~')
		tryDelete(secringFileName)
		tryDelete(trustdbFileName)
		tryDelete(gpgFileName)
		return
	(exitcode, stdout, stderr, ) = Popen(gpgEncrypt)
	if exitcode:
		print("gpg-encrypt failed with %s" % (exitcode))
		if stdout:
			print("stdout: " % repr(stdout))
		if stderr:
			print("stderr: %s" % repr(stderr))
		tryDelete(keyringFileName)
		tryDelete(keyringFileName + '~')
		tryDelete(secringFileName)
		tryDelete(trustdbFileName)
		tryDelete(gpgFileName)
		return
	tryDelete(keyringFileName)
	tryDelete(keyringFileName + '~')
	tryDelete(secringFileName)
	tryDelete(trustdbFileName)
	os.chmod(gpgFileName, stat.S_IWUSR | stat.S_IRUSR | stat.S_IRGRP | stat.S_IROTH)
	print("done.")
	return gpgFileName


def checkForRoot():
	if os.geteuid() != 0:
		print 'Please run this program as root!'
		sys.exit(3)


def prepareArchive():
	global archiveFileName, archiveFile, archive
	archiveFileName = tempfile.mkstemp(prefix='univention-support-info-%s.' % hostname, suffix='.tar.bz2')[1]
	archiveFile = open(archiveFileName, 'wb')
	archive = tarfile.open(mode='w|bz2', fileobj=archiveFile)


def closeArchive():
	archive.close()
	archiveFile.close()


def prepareEnvironment():
	global env
	env = os.environ.copy()
	env['LC_ALL'] = 'C'
	env['COLUMNS'] = '250'
	env['HOME'] = tempfile.mkdtemp(prefix='univention-support-info_')

	try:
		shutil.copy('/etc/skel/.bashrc', env['HOME'])
		shutil.copy('/etc/skel/.profile', env['HOME'])
		f = open(os.path.join(env['HOME'], '.toprc'), 'w')
		f.write(toprc)
		f.close()
		os.mkdir("%s/.gnupg" % (env['HOME']))
	except (OSError, IOError, ):
		pass


def cleanup():
	shutil.rmtree(env['HOME'], True)


def main(options):
	stdlog = logging.StreamHandler()   # log to console
	stdlog.setFormatter(logging.Formatter('%(asctime)s - %(filename)s [%(levelname)s] <%(funcName)s()>: %(message)s'))
	logger.addHandler(stdlog)
	if options.debug:
		logger.setLevel(logging.DEBUG)
	elif options.verbose:
		logger.setLevel(logging.INFO)
	else:
		logger.setLevel(logging.WARNING)

	checkForRoot()
	global archive, env, sambaDomainVersion, usilog
	prepareArchive()
	prepareEnvironment()
	usilog = tempfile.TemporaryFile(prefix='univention-support-info.')

	# USI Version
	addFile('info/usi_version', len(usiVersion), cStringIO.StringIO(usiVersion))
	print("USI Archiver Version \033[1m%s\033[0m\n" % (usiVersion))

	# Check Samba Version
	if executeCommand('samba4-pdc-dn', (_ldapsearchCommand(), '-xLLL', '(&(univentionService=Samba 4)(objectClass=univentionDomainController))', 'dn')):
		sambaDomainVersion = 4
	else:
		sambaDomainVersion = 3

	# Place new calls below this line
	checkMaintenance()
	collectCommandData()
	simpleFiles(options.flatStruct)
	licenseObject()
	templateFiles(options.flatStruct)
	aptPackageList()
	checkTransactionFile()
	atJobs()
	certificateValidities(options.flatStruct)
	univentionSystemInfo()
	if options.fullLogs:
		rotatedLogs(".*", 1000, options)
	else:
		logDepth = 2
		rotatedLogs("((log\.)?|(\.log)?(\.[0-%s](\.gz)?)?$)" % (logDepth), 1000, options)
	checkEntryUUID()
	# Place new calls above this line

	# add USI Error Log
	addFile('info/usi_runtime.log', None, usilog)

	closeArchive()
	print("Data collection completed.\n")

	if options.encrypt:
		gpgArchiveFileName = gpg(archiveFileName)
		if gpgArchiveFileName:
			print("The encrypted data can be found here:\n\t%s\n" % (gpgArchiveFileName))
		else:
			print("WARNING: The data could not be encrypted!")
		print
		print("The unencrypted data can be found here:")
	else:
		print("The data can be found here:")
	print("\t%s" % (archiveFileName))
	cleanup()

if __name__ == "__main__":
	parser = optparse.OptionParser(version="%prog {}".format(usiVersion))
	parser.add_option('--debug', action='store_true', dest='debug', default=False, help=optparse.SUPPRESS_HELP)
	parser.add_option('--verbose', action='store_true', dest='verbose', default=False, help=optparse.SUPPRESS_HELP)
	parser.add_option('--encrypt', action='store_true', dest='encrypt', default=False, help='encrypt data (can only be decrypted by Univention support)')
	parser.add_option('--full-logs', action='store_true', dest='fullLogs', default=False, help='collect also rotated logfiles')
	parser.add_option('--flat', action='store_true', dest='flatStruct', default=False, help='flatten the directry structure')
	parser.usage = '\n'.join((
		'%prog [options]',
		'collect system information',
		'',
		"%prog collects information about the system's configuration.",
		'The information is stored in a temporary tar archive, the path of which is printed to stdout.',
	))
	(options, args, ) = parser.parse_args()
	if args:
		parser.print_help()
		sys.exit(0)

	main(options)
