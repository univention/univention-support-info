#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# univention-support-info - collect system information
#
# Copyright 2011 Univention GmbH
#
# http://www.univention.de/
#
# All rights reserved.
#
# The source code of this program is made available
# under the terms of the GNU Affero General Public License version 3
# (GNU AGPL V3) as published by the Free Software Foundation.
#
# Binary versions of this program provided by Univention to you as
# well as other copyrighted, protected or trademarked materials like
# Logos, graphics, fonts, specific documentations and configurations,
# cryptographic keys etc. are subject to a license agreement between
# you and Univention and not subject to the GNU AGPL V3.
#
# In the case you use this program under the terms of the GNU AGPL V3,
# the program is provided in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public
# License with the Debian GNU/Linux or Univention distribution in file
# /usr/share/common-licenses/AGPL-3; if not, see
# <http://www.gnu.org/licenses/>.
usiVersion = '62'

fingerprint = '1EB89EEB365A84A65F95FB28CD78CD3C8F91B44F'
# create with: gpg2 --armor --export --export-options export-minimal $fingerprint
keyData = '\n'.join((
	'-----BEGIN PGP PUBLIC KEY BLOCK-----',
	'',
	'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',
	'V3t4ZerCqZKg5/Adx/Pal2J31FSmuB7Ln9WLceXfreWsVB9VIqmLEn0wESz7QUag',
	'3soVQJJrHnQLJsPzE4lfFfsC1QR5325KJavcJpzGHgRYspsjI+fSkxdnE6PZB2bn',
	'XQsrMPh/J8yJN3Hnf0iR/BMbP0NRDqF3nt472e8zDxDQZO3L3Si9mqjgbmIXC7AB',
	'EaCqCJcmMBvl4pVOBs5qjSw2DYmCOaeZi25o7Cne3TEsx7I8CF1CtEyPHWogXX8Q',
	'66JANkzmYMQvS/Y6/wmEwXEmuda+qh1QHOn5RTU2h1qMz936TA/Vy6NIIbIsmPvb',
	'x1C/h72LAjSkGmmDrdYvyjARz9alDX+XoxvoNHmg6EHc2yErYrOBN4kkDS2Z0rCB',
	'Bnj/02MbpcFTye3znlkAlA7N+YmAFMIuhV8iosQIrMFgqTxbfx9+n7dj2kiPNENt',
	'aS6CnPABTOOk5B6FrSz5wyxqdmR/vSnEvm/+GMbclleDTRH07z03u5rg4UrjtmCz',
	'+dO4UYF5CLaKspItTK2qxGmQWjx7HSG8h3T+PcGi3EDJ9Q4+P1anTDSiHxR1PYgC',
	'VJodJ3TiOxmYJhkn8+bD6KvmSUK4ZtSz4l515w==',
	'=1KWq',
	'-----END PGP PUBLIC KEY BLOCK-----'))

toprc = '\n'.join(('RCfile for "top with windows"		   # shameless braggin\'',
				   'Id:a, Mode_altscr=0, Mode_irixps=1, Delay_time=3.000, Curwin=0',
				   'Def	 fieldscur=AEHIOQTWKNMbcdfgjplrsuvyzX',
				   '		winflags=62905, sortindx=10, maxtasks=0',
				   '		summclr=1, msgsclr=1, headclr=3, taskclr=1',
				   'Job	 fieldscur=ABcefgjlrstuvyzMKNHIWOPQDX',
				   '		winflags=62777, sortindx=0, maxtasks=0',
				   '		summclr=6, msgsclr=6, headclr=7, taskclr=6',
				   'Mem	 fieldscur=ANOPQRSTUVbcdefgjlmyzWHIKX',
				   '		winflags=62777, sortindx=13, maxtasks=0',
				   '		summclr=5, msgsclr=5, headclr=4, taskclr=5',
				   'Usr	 fieldscur=ABDECGfhijlopqrstuvyzMKNWX',
				   '		winflags=62777, sortindx=4, maxtasks=0',
				   '		summclr=3, msgsclr=3, headclr=2, taskclr=3',
				   '',
				   ))

import cStringIO
import glob
import re
import gzip
import optparse
import os
import shutil
import socket
import stat
import subprocess
import threading
import sys
import tarfile
import tempfile
import time
import urllib2
from distutils.spawn import find_executable

# ignore apt's "API not stable yet" warning
import warnings
warnings.filterwarnings("ignore", category=FutureWarning, append=True)

import logging
logger = logging.getLogger('USI_DEBUG')

import apt
import apt_pkg

try:
	from univention import config_registry
except ImportError:
	if os.path.isfile('/usr/share/pyshared/univention/config_registry.py'):
		import imp
		config_registry = imp.load_source('config_registry', '/usr/share/pyshared/univention/config_registry.py')
	else:
		sys.path.append('/usr/share/pyshared')
		from univention import config_registry

ucr = config_registry.ConfigRegistry()
ucr.load()
timeString = time.strftime('%Y-%m-%d_%H-%M-%SZ', time.gmtime())
hostname = socket.gethostname()


class Command(object):
	def __init__(self, cmd, Input):
		self.cmd = cmd
		self.Input = Input
		self.process = None
		self.outData = ""
		self.errData = ""

	def run(self, timeout):
		def target():
			try:
				self.process = subprocess.Popen(self.cmd, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE, close_fds=True, env=env)
				(self.outData, self.errData) = self.process.communicate(input=self.Input)
			except (OSError, IOError) as ex:
				self.outData="Could not execute %s: %s" % (repr(self.cmd), repr(' '.join(map(str, ex.args))))

		thread = threading.Thread(target=target)
		thread.start()

		thread.join(timeout)
		if thread.is_alive():
			self.process.terminate()
			thread.join()
		if self.process:
			return (self.process.returncode, self.outData, self.errData)
		else:
			return (1, self.outData, self.errData)


def Popen(CommandTuple, Input=None, timeout=30):
	command = Command(CommandTuple, Input)
	logger.debug("running Command '{}'...".format(repr(CommandTuple)))
	Result = command.run(timeout)
	if Result[0] != 0:
		print >> usilog, "Command: '%s'\nResult: '%s'" % (repr(CommandTuple), repr(Result))
		if Result[0] == -15:
			print >> usilog, "Process has been terminated [timeout]"
		print >> usilog, ""
	return Result


def _ldapsearchCommand():
	''' Get ldapsearch command depending on UCS version '''
	if find_executable('univention-ldapsearch'):
		return 'univention-ldapsearch'
	return 'ldapsearch'


def _sprint(string):
	''' write status string to stdout without newline '''
	sys.stdout.write(string)
	sys.stdout.flush()


def U32(i):
	'''
	Return i as an unsigned integer, assuming it fits in 32 bits.
	If it's >= 2GB when viewed as a 32-bit unsigned int, return a long.
	'''
	if i < 0:
		i += 1L << 32
	return i


def addFile(name, size, fileobj):
	# try to determine filesize
	if size is None or size is False:
		fileobj.seek(0, os.SEEK_END)
		size = fileobj.tell()
	if fileobj.tell() > 0:
		fileobj.seek(0)

	info = tarfile.TarInfo()
	info.size = size
	info.name = 'univention-support-info-' + hostname + '-' + timeString + '/' + name
	info.mode = stat.S_IRUSR
	# keep file timestamp
	# info.mtime = time.time()
	try:
		logger.debug("adding file '{}'".format(info.name))
		archive.addfile(info, fileobj)
	except IOError, ex:
		print 'WARNING: failed to add %r: error=%r' % (fileobj, ex)


def addFileByPath(filename, flat):
	if filename.startswith('/proc/'):
		# This is a /proc/ file, os.stat(filename).st_size will always return 0
		tmpf = tempfile.mkstemp(prefix='univention-support-info.')[1]
		try:
			shutil.copy(filename, tmpf)
		except (OSError, IOError), error:
			error = '\n'.join(map(str, error.args))
			if flat:
				addFile('files/' + filename.strip('/').replace('/', '_') + '.ERROR', len(error), cStringIO.StringIO(error))
			else:
				addFile('files/' + filename.strip('/') + '.ERROR', len(error), cStringIO.StringIO(error))
			os.unlink(tmpf)
		filesize = os.stat(tmpf).st_size
		os.unlink(tmpf)
	else:
		try:
			filesize = os.stat(filename).st_size
		except (OSError, IOError), error:
			filesize = 0

	try:
		fileobj = open(filename, 'rb')
	except (OSError, IOError), error:
		error = '\n'.join(map(str, error.args))
		if flat:
			addFile('files/' + filename.strip('/').replace('/', '_') + '.ERROR', len(error), cStringIO.StringIO(error))
		else:
			addFile('files/' + filename.strip('/') + '.ERROR', len(error), cStringIO.StringIO(error))
	else:
		# addFile('files/' + filename.strip('/').replace('/', '_'), filesize, fileobj)
		addFile('files/' + filename.strip('/'), filesize, fileobj)
		fileobj.close()


def certificateValidity(CertificatePath, flat):
	try:
		import M2Crypto
	except ImportError, error:
		error = '\n'.join(map(str, error.args))
		if flat:
			addFile('info/ssl/' + CertificatePath.strip('/').replace('/', '_') + '.ERROR', len(error), cStringIO.StringIO(error))
		else:
			addFile('info/ssl/' + CertificatePath.strip('/') + '.ERROR', len(error), cStringIO.StringIO(error))
		return

	try:
		cert = M2Crypto.X509.load_cert(CertificatePath)
		validity = '%s\nNot Before: %s\nNot After : %s\n' % (CertificatePath, cert.get_not_before(), cert.get_not_after(), )
		if flat:
			addFile('info/ssl/' + CertificatePath.strip('/').replace('/', '_'), len(validity), cStringIO.StringIO(validity))
		else:
			addFile('info/ssl/' + CertificatePath.strip('/'), len(validity), cStringIO.StringIO(validity))
	except (OSError, IOError, M2Crypto.X509.X509Error), error:
		error = '\n'.join(map(str, error.args))
		if flat:
			addFile('info/ssl/' + CertificatePath.strip('/').replace('/', '_') + '.ERROR', len(error), cStringIO.StringIO(error))
		else:
			addFile('info/ssl/' + CertificatePath.strip('/') + '.ERROR', len(error), cStringIO.StringIO(error))


def certificateValidities(flat):
	_sprint('Checking certificate validity: ')
	CertificatePatterns = [
		'/etc/univention/ssl/*.*/cert.pem',
		'/etc/univention/ssl/ucsCA/CAcert.pem',
		]
	for CertificatePattern in CertificatePatterns:
		for CertificatePath in glob.glob(CertificatePattern):
			certificateValidity(CertificatePath, flat)
	print 'done.'


def simpleFiles(flat):
	# add S4-Connector Mapping (BUG 40571)
	# add shares.conf.d/*
	# /boot/config-*, /etc/crontab, /var/spool/cron/**, removed and add /proc/modules (BUG 35075)
	FilePatterns = [
		'/etc/apache2/*',
		'/etc/apache2/*/*',
		'/etc/apt/*',
		'/etc/apt/*/*',
		'/etc/cron*/*',
		'/etc/crontab',
		'/etc/fstab',
		'/etc/imapd/*',
		'/etc/mtab',
		'/etc/passwd',
		'/etc/procmailrc',
		'/etc/spamassassin/*',
		'/etc/univention/connector/ad/mapping.py',
		'/etc/univention/connector/s4/mapping',
		'/etc/univention/connector/s4/mapping.py',
		'/etc/univention/connector/s4/mapping',
		'/etc/univention/installation_profile',
		'/etc/ox-secrets/*',
		'/opt/open-xchange/etc/*',
		'/opt/open-xchange/etc/*/*',
		'/opt/open-xchange/etc/*/*/*',
		'/proc/mounts*',
		'/proc/mdstat',
		'/proc/modules',
		'/proc/drbd',
		'/proc/cmdline',
		'/var/lib/univention-directory-listener/bad_cache',
		'/var/lib/univention-directory-replication/failed.ldif',
		'/var/lib/univention-connector/s4/*',
		'/var/lib/samba/private/.adtakeover/*',
		'/var/spool/cron/**',
		'/etc/postfix/*',
		'/etc/samba/shares.conf.d/*',
		'/etc/imapd/*',
		'/var/univention-backup/ad-takeover/*',
		'/etc/*/local.conf*',
		'/root/.bash_history',
		'/etc/ldap/slapd.conf',
		]
	FileExcludePatterns = ['/etc/apache2/mods-available/*', '/etc/apache2/sites-available/*']

	Files = set()
	ExcludeFiles = list()
	for FileExcludePattern in FileExcludePatterns:
		ExcludeFiles.extend(glob.glob(FileExcludePattern))
	for FilePattern in FilePatterns:
		for Filename in glob.glob(FilePattern):
			if Filename not in ExcludeFiles:
				Files.add(Filename)

	_sprint('Collecting files: ')
	for Filename in sorted(list(Files)):
		if os.path.isfile(Filename):
			addFileByPath(Filename, flat)
			_sprint('.')
	print 'done.'


def licenseObject():
	''' Get license object from ldap (cn=license) '''
	stdout = executeCommand('univention-license-object', (_ldapsearchCommand(), '-x', '-b', 'cn=license,cn=univention,'+ucr.get('ldap/base')))
	addFile('info/univention-license-object', len(stdout), cStringIO.StringIO(stdout))


def checkMaintenance():
	''' Check if UCS-Version is in maintenance '''
	if ucr.get('server/role') != 'ucc':
		ucs_ver = ucr.get('version/version') + '-' + ucr.get('version/patchlevel')
		ucs_lic = ucr.get('license/base')
		ldap_base = ucr.get('ldap/base')
		# check depending on License
		try:
			maint_url = "http://updates.software-univention.de/download/ucs-maintenance/" + ucs_ver + ".yaml"
			data = urllib2.urlopen(maint_url).read()
			maint_info = dict((k.strip(), v.strip()) for k, v in (line.split(':', 1) for line in data.split("\n") if line))

			tmpf = tempfile.TemporaryFile(prefix='univention-support-info.')
			# if maint_info['maintained'].lower() not in ['true', '1']:
			if maint_info['maintained'].lower() in ['true', '1'] or ( maint_info['maintained'].lower() in ['extended', '1'] and ucs_lic == ldap_base ):
				print >> tmpf, "maintenance ok\ncurrent UCS Version %s" % (ucs_ver)
				addFile('info/maintenance', None, tmpf)
			else:
				miMsg = "Please note, system is no longer maintained, security updates are no longer available for current UCS Version %s" % (ucs_ver)
				print "\033[93m%s\033[0m" % (miMsg)
				print >> tmpf, miMsg
				addFile('info/maintenance', None, tmpf)
		except (urllib2.URLError, IOError) as innerex:
			tmpf = tempfile.TemporaryFile(prefix='univention-support-info.')
			print "Warn: Can't reach univention server - product maintenance undetermined [%s]" % (innerex)
			print >> tmpf, "Failed to check maintenance (%s)\ncurrent UCS Version %s" % (innerex, ucs_ver)
			addFile('info/maintenance', None, tmpf)
	else:
		ucc_ver = ucr.get('version/version')
		tmpf = tempfile.TemporaryFile(prefix='univention-support-info.')
		print "Could NOT determine product maintenance for UCC systems."
		print >> tmpf, "Could NOT determine product maintenance for UCC systems.)\ncurrent UCC Version %s" % (ucc_ver)
		addFile('info/maintenance', None, tmpf)


def checkEntryUUID():
	''' Check if ldap base is searchable by its entryUUID '''
	entryuuid = ""
	basedn = ""
	tmpf = tempfile.TemporaryFile(prefix='univention-support-info.')
	(exitcode, stdout, stderr, ) = Popen( (_ldapsearchCommand(), '-xLLL', '-sbase', 'entryUUID', ) )
	if exitcode == 0:
		entryuuid = stdout.split()[3]
	else:
		print >> tmpf, "ERROR: ldapsearch for base failed: %s" % str(stderr)
		addFile('info/entryUUID.stderr', None, tmpf)
		return
	(exitcode, stdout, stderr, ) = Popen( (_ldapsearchCommand(), '-xLLL', 'entryUUID='+entryuuid, 'dn', ) )
	if exitcode == 0:
		basedn = stdout.split()[1]
	else:
		print >> tmpf, "ERROR: ldapsearch by entryUUID failed: %s" % str(stderr)
		addFile('info/entryUUID.stderr', None, tmpf)
		return
	if ucr.get('ldap/base') == basedn:
		print >> tmpf, "OK: ldap base found by entryUUID"
	else:
		print >> tmpf, "ERROR: ldap base not found by entryUUID, check ldap index"
	addFile('info/entryUUID', None, tmpf)


def aptPackageList():
	"""List installed packages and their source repository."""
	_sprint('Collecting package lists: ')
	cache = apt.Cache()

	packagesAll = tempfile.TemporaryFile(prefix='univention-support-info.')
	packagesUnknownSource = tempfile.TemporaryFile(prefix='univention-support-info.')

	packages = [_ for _ in cache if _.is_installed]
	for pkg in packages:
		version = pkg.installed.version
		package = pkg.versions[version]
		try:
			uri = package.uri
		except StopIteration:
			print >> packagesUnknownSource, "%s\tUNKNOWN" % (pkg.name,)
			continue
		print >> packagesAll, "%s\t%s" % (pkg.name, uri)

	addFile('info/packages_all', None, packagesAll)
	addFile('info/packages_unknown-source', None, packagesUnknownSource)
	print 'done.'


def executeCommand(commandName, command, log_stderr=False):
	(exitcode, stdout, stderr, ) = Popen(command)
	if exitcode or log_stderr:
		if type(exitcode) is int:
			stderr += '\nExitcode was %d\n' % exitcode
		else:
			stderr += exitcode + '\n'
		addFile('info/' + commandName + '.stderr', len(stderr), cStringIO.StringIO(stderr))
	return stdout


def templateFiles(flat):
	_sprint('Searching for changed template files: ')
	stdout = executeCommand('check-templates', ('find', '/etc/univention/templates/files/', '(', '-name', '*.dpkg-new', '-o', '-name', '*.dpkg-dist', ')', '-print0', ))
	files = [templatefile for templatefile in stdout.split('\0') if templatefile]
	message = ('Found %d:\n' % len(files)) + '\n'.join(files) + '\n'
	addFile('info/check-templates', len(message), cStringIO.StringIO(message))
	for templatefile in files:
		addFileByPath(templatefile, flat)
		if templatefile.endswith('.dpkg-new'):
			addFileByPath(templatefile[:-len('.dpkg-new')], flat)
		elif templatefile.endswith('.dpkg-dist'):
			addFileByPath(templatefile[:-len('.dpkg-dist')], flat)
		_sprint('.')
	print 'done.'


def checkTransactionFile():
	_sprint('Collecting output transaction-file-check: ')

	transactionCheck = tempfile.TemporaryFile(prefix='univention-support-info.')
	try:
		with open('/var/lib/univention-ldap/notify/transaction', 'r') as transaction:
			tac = 1  # transaction id counter
			tlc = 1  # transaction line counter

			for line in transaction:
				tid = line.strip().split(' ', 1)[0]

				try:
					tid = int(tid)
				except:
					print >> transactionCheck, 'ERROR at line %d: "%s"' % (tlc, ' '.join(line))
					continue

				if tid == tac:  # ok
					tac += 1
				else:
					print >> transactionCheck, 'Line %s: \t ID:%s should be %s' % (tlc, tid, tac),
					cld = (tid - tac)  # counter line diff
					if cld < 0:  # id repeat
						cld = (cld * -1)
						print >> transactionCheck, ' REPEATED (%s)' % (cld)
						tac = (tid + cld)
					elif cld > 0:  # id skip
						print >> transactionCheck, ' SKIPPED (%s)' % (cld)
						tac = (tid + 1)

				tlc += 1
		addFile('info/transaction-file-check', None, transactionCheck)
		print 'done.'

	except IOError:
		print >> transactionCheck, 'ERROR: NO TRANSACTION FILE!'
		print 'FAIL'



def collectCommandData():
	# add pvdisplay,vgdisplay,lvdisplay (BUG 35075)
	# add sharesec --view-all (BUG 44376)
	commands = {'hostname-f':
					('hostname', '--fqdn', ),
				'ifconfig-a':
					('ifconfig', '-v', '-a', ),
				'iptables-L_filter':
					('iptables', '-L', '-n', '-v', '-t', 'filter', ),
				'iptables-L_nat':
					('iptables', '-L', '-n', '-v', '-t', 'nat', ),
				'iptables-L_mangle':
					('iptables', '-L', '-n', '-v', '-t', 'mangle', ),
				'iptables-L_raw':
					('iptables', '-L', '-n', '-v', '-t', 'raw', ),
				'iptables-save':
					('iptables-save', '-c', ),
				'route-4':
					('route', '-v', '-ee', '-n', '-A', 'inet', ),
				'route-6':
					('route', '-v', '-ee', '-n', '-A', 'inet6', ),
				'netstat':
					('netstat', '--tcp', '--udp', '--listening', '--program', '--extend', '--extend', '--verbose', '--timers', '--numeric', '--wide', ),
				'dpkg-l':
					('dpkg-query', '--show', '--showformat=${Status}\t${Package}\t${Version}\n', ),
				'dpkg--audit':
					('dpkg', '--audit', ),
				'uname':
					('uname', '-a', ),
				'ps':
					('ps', '-AHFly', ),
				'ps-full':
					('ps', '-ALwwo', 'stat,pid,ppid,sid,tty,nlwp,lwp,pri,ni,sched,wchan,vsz,rss,sz,pcpu,pmem,cmd,blocked,caught,ignored,pending,lstart,cls,time,flags,uid,user,ruid,ruser,suid,suser,gid,group,rgid,rgroup,sgid,sgroup', ),
				'ucr-dump':
					('univention-config-registry', 'dump', ),
				'df-full':
					('df', '--portability', '--print-type', ),
				'df-i-full':
					('df', '--portability', '--print-type', '--inodes', ),
				'df':
					('df', '-h', ),
				'df-i':
					('df', '-h', '-i', ),
				'join-status':
					('univention-check-join-status', ),
				'virsh-qemu':
					('virsh', '-c', 'qemu:///system', 'capabilities', ),
				'virsh-xen':
					('virsh', '-c', 'xen:///',		'capabilities', ),
                                'pvdisplay':
                                        ('pvdisplay',),
                                'vgdisplay':
                                        ('vgdisplay',),
                                'lvdisplay':
                                        ('lvdisplay',),
				'top':
					('top', '-b', '-n2', ),
				'testparm':
					(('testparm', '-s', '-vvv', ), True),
				'listenerID':
					('cat', '/var/lib/univention-directory-listener/notifier_id', ),
				'notifierID':
					('/usr/share/univention-directory-listener/get_notifier_id.py', ),
				'mailq':
					('mailq', ),
				'univention-license-check':
					('univention-license-check', ),
				'hostaccount-id':
					('id', ucr.get('hostname') + '$', ),
				'dig_AXFR':
					('dig', '@%s' % ucr.get('nameserver1'), ucr.get('domainname'), '-t', 'AXFR'),
				'univention-connector-list-rejected':
					('univention-connector-list-rejected', ),
				'sharesec':
					('sharesec', '--view-all', ),
				'adtakeover':
					('ls -1d', '/var/lib/samba*/private.before-ad-takeover-*', ),
				'univentionService':
					('univention-ldapsearch', '-xLLL', '(|(univentionService=S4-Connector)(univentionService=Samba 4))', 'univentionService', ),
					# ('univention-ldapsearch', '-xLLL', '(|(univentionService=S4-Connector)(univentionService=Samba 4))', 'univentionService univentionObjectType univentionServerRole univentionOperatingSystem univentionOperatingSystemVersion', ),
				}
	# Commands depending on samba version
	if sambaDomainVersion == 3:
		commands.update({'test-join':
							('net', 'rpc', 'testjoin', ),
						})
	elif sambaDomainVersion == 4:
		commands.update({'net-ads-info':
							('net', 'ads', 'info', ),
						'net-ads-lookup':
							('net', 'ads', 'lookup', ),
						})
		if ucr.get('samba4/role', None):
			# Run only S4
			commands.update({'samba-tool-drs-showrepl':
								('samba-tool', 'drs', 'showrepl', ),
							'samba-tool-domain-level-show':
								('samba-tool', 'domain', 'level', 'show'),
							'samba-tool-domain-passwordsettings':
								('samba-tool', 'domain', 'passwordsettings', 'show' ),
							'testparm-samba4':
								(('testparm.samba4', '-s', '-vvv'), True),
							'samba-tool-fsmo-show':
								('samba-tool', 'fsmo', 'show'),
							'univention-s4connector-list-rejected':
								('univention-s4connector-list-rejected', ),
							'samba-tool-processes':
								('samba-tool', 'processes'),
							'check-essential-dns-records':
								('/usr/share/univention-samba4/scripts/check_essential_samba4_dns_records.sh',),
							})
			# >= Samba4 RC (UCS 3.1)
			if ucr.get('version/version') >= '3.1':
				commands.update({'samba-tool-domain-info':
									('samba-tool', 'domain', 'info', '127.0.0.1', ),
								})
		else:
			# Run only on S3 member in S4 domain
			commands.update({'test-join':
								('net', 'ads', 'testjoin', ),
							})
	# Commands depending on UCS-Version >= UCS 4.1-3
	if ((ucr.get ('version/version') == '4.1') and (ucr.get ('version/patchlevel') >= '3')) or ucr.get ('version/version') >= '4.2':
		commands.update({'univention-directory-listener-ctrl':
					('univention-directory-listener-ctrl', 'status', ),
					})
	# Commands depending on UCS-Version → UCS 4.2
	if ucr.get ('version/version') >= '4.2':
		commands.update({'journalctl':
							('journalctl', '--since=yesterday', ),
						'hostnamectl-status':
							('hostnamectl', 'status', ),
						'univention-app-info':
							('univention-app', 'info', ),
						})

	_sprint('Collecting command output: ')
	for commandName in commands:
		command = commands[commandName]
		if type(command[0]) == tuple:
			stdout = executeCommand(commandName, command[0], command[1])
		else:
			stdout = executeCommand(commandName, command)

		addFile('info/' + commandName, len(stdout), cStringIO.StringIO(stdout))
		_sprint('.')
	print 'done.'



def univentionSystemInfo():
	_sprint('Collecting hardware information: ')
	manu = executeCommand('dmidecode', ('dmidecode', '-s', 'system-manufacturer'))
	product = executeCommand('dmidecode', ('dmidecode', '-s', 'system-product-name'))
	if not manu:
		manu = 'Unknown'
	if not product:
		product = 'Unknown'
	stdout = executeCommand('univention-system-info', ('univention-system-info', '-u', '-m', manu, '-t', product, '-c', 'Created by univention-support-info', '-s', '-', ))
	archive = None
	for line in stdout.split('\n'):
		if line.startswith('archive'):
			archive = line.split(':', 1)[1]
	if not archive:
		error = 'No archive returned!'
		error += '\nunivention-system-info stdout:\n%s' % stdout
		addFile('info/univention-system-info.ERROR', len(error), cStringIO.StringIO(error))
		return
	filename = os.path.join('/var/www/univention-management-console/system-info/', archive)
	# If UMC is not installed /var/www/univention-management-console/system-info/ does not exist and archive stays in /tmp
	if not os.path.isfile(filename):
		filename = os.path.join('/tmp/', archive)
	try:
		archive = tarfile.open(name=filename, mode='r:*')
		for member in archive:
			if member.isfile():
				fileobj = archive.extractfile(member)
				addFile('info/univention-system-info/' + member.name, member.size, fileobj)
				fileobj.close()
		archive.close()
	except (IOError, tarfile.TarError, ), error:
		error = '\n'.join(map(str, error.args))
		error += '\nunivention-system-info stdout:\n%s' % stdout
		addFile('info/univention-system-info.ERROR', len(error), cStringIO.StringIO(error))
	print 'done.'


def rotatedLogs(regEx, DefaultMaxLineCount, options):
	DirectoryList = [
		('/var/log/auth.log', DefaultMaxLineCount),
		('/var/log/boot.log', DefaultMaxLineCount),
		('/var/log/daemon.log', DefaultMaxLineCount),
		('/var/log/debug.log', DefaultMaxLineCount),
		('/var/log/dpkg.log', DefaultMaxLineCount),
		('/var/log/heimdal-kdc.log', DefaultMaxLineCount),
		('/var/log/kern.log', DefaultMaxLineCount),
		('/var/log/mail.log', DefaultMaxLineCount),
		('/var/log/messages', DefaultMaxLineCount),
		('/var/log/syslog', 2000000),
		('/var/log/apt/term.log', DefaultMaxLineCount),
		('/var/log/univention/config-registry.replog', DefaultMaxLineCount),
		('/var/log/univention/connector-s4.log', 2000000),
		('/var/log/univention/system-stats.log', 5000000),
		('/var/log/apache/', DefaultMaxLineCount),
		('/var/log/apache2/', DefaultMaxLineCount),
		('/var/log/cups/', DefaultMaxLineCount),
		('/var/log/dansguardian/', DefaultMaxLineCount),
		('/var/log/freeradius/', DefaultMaxLineCount),
		('/var/log/installer/', 2000000),
		('/var/log/kopano/', 100000),
		('/var/log/libvirt/', DefaultMaxLineCount),
		('/var/log/open-xchange/', DefaultMaxLineCount),
		('/var/log/samba/', DefaultMaxLineCount),
		('/var/log/squid/', DefaultMaxLineCount),
		('/var/log/squidguard/', DefaultMaxLineCount),
		('/var/log/univention/', DefaultMaxLineCount),
		('/var/log/univention/ucc-clients/', DefaultMaxLineCount),
		('/var/log/zarafa/', 100000),
		]
	FullLogs = set((  # for these every available log-file shall be included
		'/var/log/daemon.log',
		'/var/log/dpkg.log',
		'/var/log/kern.log',
		'/var/log/apt/term.log',
		'/var/log/univention/updater.log',
		'/var/log/univention/ad-takeover.log',

	))
	GzipSuffix = '.gz'
	logs = {}
	for Entry in [fp[0] for fp in DirectoryList]:
		if os.path.isdir(Entry):
			FileList = ["%s%s" % (Entry, f, ) for f in os.listdir(Entry) if re.search(r"%s%s" % (os.path.splitext(f)[0], regEx), f)]
                        logger.debug("Dir.Entry: '{0}' has Files '{1}'".format(Entry, FileList))
		elif os.path.isfile(Entry):
			entryPath = "%s/" % os.path.dirname(Entry)
			entryFile = os.path.basename(Entry)
			entryFilename = os.path.splitext(entryFile)[0]
			FileList = ["%s%s" % (entryPath, f, ) for f in os.listdir(entryPath) if re.search(r"%s%s" % (entryFilename, regEx), f)]
		else:
			FileList = []
		# for filename in glob.glob(FilePattern):
		for filename in FileList:
			if os.stat(filename).st_size <= 0 or os.path.isdir(filename):
				# ignore 0 byte files
				continue
			if filename.endswith(GzipSuffix):
				gzipped = True
				filename = filename[:-len(GzipSuffix)]
			else:
				gzipped = False
			if not filename.endswith('.') and os.path.splitext(filename)[1].strip('0123456789') == '.':  # has extension and only digits in it
				(filename, ext, ) = os.path.splitext(filename)
				number = int(ext.lstrip('.'))
			else:
				number = -1
			if filename not in logs:
				logs[filename] = {}
			logs[filename][number] = gzipped

	_sprint('Collecting logfiles: ')
	for logname in sorted(logs):
		logLinecount = 0
		nonemptyNumber = 0
		for number in sorted(logs[logname]):
			# is logname gzipped?
			gzipped = logs[logname][number]
			path = logname
			fileLinecount = 0
			if number != -1:
				path += '.%d' % number
			if gzipped:
				try:
					logfile = open(path + GzipSuffix, 'rb')
				except (OSError, IOError, ), error:
					error = '\n'.join(map(str, error.args))
					if options.flatStruct:
						addFile('files/' + '%s_%d.stderr' % (logname.strip('/').replace('/', '_'), number, ), len(error), cStringIO.StringIO(error))
					else:
						addFile('files/' + '%s_%d.stderr' % (logname.strip('/'), number, ), len(error), cStringIO.StringIO(error))
					continue

				# calc bytes and linecount of logfile
				# last 4 bytes of a gzip file contain the size of the original (uncompressed) input data modulo 2^32.
				try:
					logfile.seek(-4, os.SEEK_END)
				except IOError, e:
					print('\n\nFilename: %s' % path + GzipSuffix)
					raise IOError(e)
				fileBytes = U32(gzip.read32(logfile))
				logfile.close()
				fileLinecount = int(subprocess.Popen('zcat -f %s | wc -l' % (path + GzipSuffix), stdout=subprocess.PIPE, shell=True).stdout.read().strip())
			else:
				# addFile may calculate the size for us
				fileBytes = None
				fileLinecount = int(subprocess.Popen(('wc', '-l', path), stdout=subprocess.PIPE).stdout.read().strip().split()[0])
			logLinecount += fileLinecount
			# if gzipped:
			# 	_sprint( '"%s", "%s", "%s" -> ' % (path + GzipSuffix, fileBytes, fileLinecount) )
			# else:
			# 	_sprint( '"%s", "%s", "%s" -> ' % (path, fileBytes, fileLinecount) )

			if fileLinecount <= 0:
				# skip logname if empty
				# print 'ERROR: Empty file? "%s"' % path
				continue

			nonemptyNumber += 1
			try:
				if gzipped:
					logfile = gzip.GzipFile(path + GzipSuffix, 'rb')
				else:
					logfile = open(path, 'rb')
			except (OSError, IOError, ), error:
				error = '\n'.join(map(str, error.args))
				if options.flatStruct:
					addFile('files/' + '%s_%d.stderr' % (logname.strip('/').replace('/', '_'), nonemptyNumber, ), len(error), cStringIO.StringIO(error))
				else:
					addFile('files/' + '%s_%d.stderr' % (logname.strip('/'), nonemptyNumber, ), len(error), cStringIO.StringIO(error))
				continue

			# Add file to archive ...
			if options.flatStruct:
				addFile('files/' + '%s_%d' % (logname.strip('/').replace('/', '_'), nonemptyNumber, ), fileBytes, logfile)
				## print 'Added as "%s_%d"' % (logname.strip('/').replace('/', '_'), nonemptyNumber, )
			else:
				addFile('files/' + '%s_%d' % (logname.strip('/'), nonemptyNumber, ), fileBytes, logfile)
				# print 'Added as "%s_%d"' % (logname.strip('/'), nonemptyNumber, )
			logfile.close()

			if not options.fullLogs:
                            logger.debug("*** LN: '{}' ***".format(logname))
                            logger.debug("*** DL: '{}'\n***".format(DirectoryList))
                            try:
                                if logname not in FullLogs and logLinecount > filter(lambda x: logname.startswith(x[0].replace('*', '')), DirectoryList)[0][1]:
                                    break
                            except Exception as ex:
                                logger.debug("EXCEPTION: {}".format(ex))
                                continue

		_sprint('.')
	print 'done.'


def atJobs():
	'''
	Generate a list of at-Jobs (usefull for UCS@school)
	'''
	try:
		from univention.lib import atjobs as at
	except ImportError, error:
		error = str(error.message)
		addFile('info/at-jobs' + '.ERROR', len(error), cStringIO.StringIO(error))
		return

	jobs = ''
	try:
		for job in at.list(extended=True):
			jobs += '\n'.join(str(job))
	except OSError, error:
		error = str(error.message)
		addFile('info/at-jobs' + '.ERROR', len(error), cStringIO.StringIO(error))
	addFile('info/at-jobs', len(jobs), cStringIO.StringIO(jobs))


def tryDelete(filename):
	try:
		os.remove(filename)
	except (OSError, IOError, ):
		pass


def gpg(archiveFileName):
	print("Encrypting file..."),
	keyringFileName = tempfile.mkstemp(prefix='univention-support-info-keyring.', suffix='.gpg')[1]
	secringFileName = tempfile.mkstemp(prefix='univention-support-info-secring.', suffix='.gpg')[1]
	trustdbFileName = tempfile.mkstemp(prefix='univention-support-info-trustdb.', suffix='.gpg')[1]
	tryDelete(trustdbFileName)  # HACK: file must not exist for gpg to work
	gpgFileName = archiveFileName + '.gpg'
	gpgBase = ('gpg',
			   '--batch', '--quiet', '--no-tty',
			   '--with-colons', '--utf8-strings',
			   '--no-auto-check-trustdb', '--no-auto-key-locate',
			   '--no-options',
			   '--no-random-seed-file',
			   '--trust-model','always',
			   '--trustdb-name', trustdbFileName,
			   '--secret-keyring', secringFileName,
			   '--no-default-keyring', '--keyring', keyringFileName,
			   )
	gpgImport  = gpgBase + ('--import',
							)
	gpgEncrypt = gpgBase + ('--recipient', fingerprint,
							'--encrypt', archiveFileName,
							)
	# Popen is a function above which injects the Input to the called process as "human" input
	(exitcode, stdout, stderr, ) = Popen(gpgImport, Input=keyData)
	if exitcode:
		print("gpg-import failed with %s" % (exitcode))
		if stdout:
			print("stdout: %s" % repr(stdout))
		if stderr:
			print("stderr: %s" % repr(stderr))
		tryDelete(keyringFileName)
		tryDelete(keyringFileName + '~')
		tryDelete(secringFileName)
		tryDelete(trustdbFileName)
		tryDelete(gpgFileName)
		return
	(exitcode, stdout, stderr, ) = Popen(gpgEncrypt)
	if exitcode:
		print("gpg-encrypt failed with %s" % (exitcode))
		if stdout:
			print("stdout: " % repr(stdout))
		if stderr:
			print("stderr: %s" % repr(stderr))
		tryDelete(keyringFileName)
		tryDelete(keyringFileName + '~')
		tryDelete(secringFileName)
		tryDelete(trustdbFileName)
		tryDelete(gpgFileName)
		return
	tryDelete(keyringFileName)
	tryDelete(keyringFileName + '~')
	tryDelete(secringFileName)
	tryDelete(trustdbFileName)
	os.chmod(gpgFileName, stat.S_IWUSR | stat.S_IRUSR | stat.S_IRGRP | stat.S_IROTH)
	print("done.")
	return gpgFileName


def checkForRoot():
	if os.geteuid() != 0:
		print 'Please run this program as root!'
		sys.exit(3)


def prepareArchive():
	global archiveFileName, archiveFile, archive
	archiveFileName = tempfile.mkstemp(prefix='univention-support-info-%s.' % hostname, suffix='.tar.bz2')[1]
	archiveFile = open(archiveFileName, 'wb')
	archive = tarfile.open(mode='w|bz2', fileobj=archiveFile)


def closeArchive():
	archive.close()
	archiveFile.close()


def prepareEnvironment():
	global env
	env = os.environ.copy()
	env['LC_ALL'] = 'C'
	env['COLUMNS'] = '250'
	env['HOME'] = tempfile.mkdtemp(prefix='univention-support-info_')

	try:
		shutil.copy('/etc/skel/.bashrc', env['HOME'])
		shutil.copy('/etc/skel/.profile', env['HOME'])
		f = open(os.path.join(env['HOME'], '.toprc'), 'w')
		f.write(toprc)
		f.close()
		os.mkdir("%s/.gnupg" % (env['HOME']))
	except (OSError, IOError, ):
		pass


def cleanup():
	shutil.rmtree(env['HOME'], True)


def main(options):
	stdlog = logging.StreamHandler()   # log to console
	stdlog.setFormatter(logging.Formatter('%(asctime)s - %(filename)s [%(levelname)s] <%(funcName)s()>: %(message)s'))
	logger.addHandler(stdlog)
	if options.debug:
		logger.setLevel(logging.DEBUG)
	elif options.verbose:
		logger.setLevel(logging.INFO)
	else:
		logger.setLevel(logging.WARNING)

	checkForRoot()
	global archive, env, sambaDomainVersion, usilog
	prepareArchive()
	prepareEnvironment()
	usilog = tempfile.TemporaryFile(prefix='univention-support-info.')

	# USI Version
	addFile('info/usi_version', len(usiVersion), cStringIO.StringIO(usiVersion))
	print("USI Archiver Version \033[1m%s\033[0m\n" % (usiVersion))

	# Check Samba Version
	if executeCommand('samba4-pdc-dn', (_ldapsearchCommand(), '-xLLL', '(&(univentionService=Samba 4)(objectClass=univentionDomainController))', 'dn')):
		sambaDomainVersion = 4
	else:
		sambaDomainVersion = 3

	# Place new calls below this line
	checkMaintenance()
	collectCommandData()
	simpleFiles(options.flatStruct)
	licenseObject()
	templateFiles(options.flatStruct)
	aptPackageList()
	checkTransactionFile()
	atJobs()
	certificateValidities(options.flatStruct)
	univentionSystemInfo()
	if options.fullLogs:
		rotatedLogs(".*", 1000, options)
	else:
		logDepth = 2
		rotatedLogs("((log\.)?|(\.log)?(\.[0-%s](\.gz)?)?$)" % (logDepth), 1000, options)
	checkEntryUUID()
	# Place new calls above this line

	# add USI Error Log
	addFile('info/usi_runtime.log', None, usilog)

	closeArchive()
	print("Data collection completed.\n")

	if options.encrypt:
		gpgArchiveFileName = gpg(archiveFileName)
		if gpgArchiveFileName:
			print("The encrypted data can be found here:\n\t%s\n" % (gpgArchiveFileName))
		else:
			print("WARNING: The data could not be encrypted!")
		print
		print("The unencrypted data can be found here:")
	else:
		print("The data can be found here:")
	print("\t%s" % (archiveFileName))
	cleanup()

if __name__ == "__main__":
	parser = optparse.OptionParser(version="%prog {}".format(usiVersion))
	parser.add_option('--debug', action='store_true', dest='debug', default=False, help=optparse.SUPPRESS_HELP)
	parser.add_option('--verbose', action='store_true', dest='verbose', default=False, help=optparse.SUPPRESS_HELP)
	parser.add_option('--encrypt', action='store_true', dest='encrypt', default=False, help='encrypt data (can only be decrypted by Univention support)')
	parser.add_option('--full-logs', action='store_true', dest='fullLogs', default=False, help='collect also rotated logfiles')
	parser.add_option('--flat', action='store_true', dest='flatStruct', default=False, help='flatten the directry structure')
	parser.usage = '\n'.join(('%prog [options]',
							  'collect system information',
							  '',
							  "%prog collects information about the system's configuration.",
							  'The information is stored in a temporary tar archive, the path of which is printed to stdout.',
							  ))
	(options, args, ) = parser.parse_args()
	if args:
		parser.print_help()
		sys.exit(0)

	main(options)
